
    // checkForVerticalCollisions() {
    //     this.world.level.platforms.forEach(platform => {
    //         if (this.isColliding(platform)) {
    //             if (this.speedY < 0) {
    //                 this.speedY = 0;
    //                 this.y = platform.y - this.height - this.offset.bottom - 0.01;
    //                 this.isAbovePlatform = true;
    //             }
    //             if (this.speedY > 0) {
    //                 this.speedY = 0;
    //                 this.y = platform.y + platform.height + 0.01;
    //                 this.isAbovePlatform = true;

    //             }
    //         }
    //     });
    // }

    // checkForHorizontalCollisions() {
    //     this.world.level.platforms.forEach(platform => {
    //         if (this.isColliding(platform)) {
    //             if (this.speedX < 0) {
    //                 this.speedX = 0;
    //                 !this.isAboveGround();
    //                 this.x = platform.x - this.width - this.offset.right - 0.01;
    //             }
    //             if (this.speedX > 0) {
    //                 this.speedX = 0;
    //                 !this.isAboveGround();
    //                 this.x = platform.x + platform.width + 0.01;
    //             }
    //         }
    //     });
    // }



    
    // checkPlatformsCollision() {
    //     for (const platform of this.world.level.platforms) {
    //         if (this.platformCollision(platform)) {
    //             if (this.speedY < 0 && !this.isOnPlatform) {
    //                 this.speedY = 0;
    //                 this.isOnPlatform = true;
    //                 console.log('onPlatform status', this.isOnPlatform)
    //                 this.y = ((platform.y + platform.offset.top) - (this.height - this.offset.bottom)) - 0.01;
    //                 break
    //             }
    //         }
    //     }
    // }


       // comesFromTop(obj) {
    //     if (
    //         this.speedY < 0 &&
    //         this.isColliding(obj)
    //         // this.isColliding(obj, obj instanceof Snake  || obj instanceof Spider)
    //     ) {
    //         console.log('comeFromTop of', obj instanceof Snake, obj)
    //         return true;
    //     } else if(
    //         this.speedY < 0 &&
    //         this.isAbovePlatform(obj)){
    //         // this.isAbovePlatform(obj, obj instanceof Platforms)){
    //         return true;
    //     }else {
    //         return false;
    //     }
    // }



    // comesFromTop(obj) {
    //     const thisBottom = this.y + this.height - this.offset.bottom;                // trying to improve function to stay on platform
    //     const ObjectTop = obj.y + obj.offset.top;
    //     if (
    //         this.isColliding(obj) &&
    //         this.isAboveGround() &&
    //         this.speedY < 0 &&
    //         thisBottom >= ObjectTop
    //     ) {
    //         return true;
    //     } else {
    //         return false;
    //     }
    // }


    // isOnPlatformTop(obj) {
    //     return (this.x + this.width - this.offset.right) >= obj.x + obj.offset.left &&
    //         (this.x + this.offset.left) >= (obj.x + obj.width - obj.offset.right)
    // }

    // collideFromSide(mo) {
    //     return (mo.x + mo.offset.left, mo.y + mo.offset.top, mo.width - (mo.offset.right + mo.offset.left), mo.height - (mo.offset.top + mo.offset.bottom))
    // }

    // collideFromSide(obj) {
    //     return this.y + this.offset.top <= (obj.y + obj.height - obj.offset.bottom) &&
    //         (this.x + this.offset.left) <= (obj.x + obj.width - obj.offset.right) &&
    //         (this.x + this.width - this.offset.right >= obj.x) ||
    //         (this.x + this.offset.left) <= obj.x
    // }


    
    // collides(obj) {
    //     return (this.x + this.width - this.offset.right) >= obj.x + obj.offset.left ||
    //         (this.x + this.offset.left) <= (obj.x + obj.width - obj.offset.right) // change to right because seems to be logical , change to bottom if problems
    //     // && obj.onCollisionCourse; // Optional: hiermit könnten wir schauen, ob ein Objekt sich in die richtige Richtung bewegt. Nur dann kollidieren wir. Nützlich bei Gegenständen, auf denen man stehen kann.
    // }


    
    // trying to improve function to stay on platform

    // checkPlatformsCollision() {
    //     this.level.platforms.forEach(platform => {
    //         // if(!this.character.isColliding(platform)){
    //         //     this.character.obstacle = false;            // need help to resolve this, obstacle switch between true and false because of isColliding. 
    //         // }

    //         if (this.character.comesFromTop(platform)) {
    //             this.character.isOnPlatform = true;
    //             this.character.y = platform.y + platform.offset.top - this.character.height + this.character.offset.bottom;
    //         }
    //         // if (this.character.isColliding(platform) && !this.character.isOnPlatformTop(platform)) {
    //         //     this.character.isOnPlatform = true;
    //         // }
    //         // if(this.character.collideFromSide(platform)){
    //         //     console.log('coliding')
    //         //     this.character.obstacle = true;             // need help to resolve this, obstacle switch between true and false because of isColliding. 
    //         // }
    //         if (this.character.isOnPlatformTop(platform)) {
    //             this.character.isOnPlatform = false;
    //         }
    //     });
    // }


    // function checkPlatformsCollision() {
    //     this.world.level.platforms.forEach(platform => {
    //         if(this.comesFromTop(platform)){
    //         // if(this.comesFromTop(platform) || this.isAbovePlatform(platform)){
    //             console.log('comefromtopofplatform', this.comesFromTop(platform), 'or isAbovePlatform', this.isAbovePlatform(platform))
    //             this.landOnPlatform(platform)
    //         }
    //         // else if(!this.isAbovePlatform(platform)){
    //         //     this.isOnPlatform = false;
    //         // }
    //     });
    // }

    // function isAbovePlatform(platform) {
    //     return this.y + this.height - this.offset.bottom <= platform.y + platform.offset.top
    //         && (this.x + this.width - this.offset.right) >= (platform.x + platform.offset.left) &&
    //         (this.x + this.width - this.offset.right) <= (platform.x + platform.width - platform.offset.right) ||
    //         this.x + this.offsetleft > platform.x + platform.offset.left &&
    //         this.x + width - this.offset.right < platform.x + platform.width - platform.offset
    // }

    // function landOnPlatform(platform) {
    //     console.log('character is on a platform')
    //     this.isOnPlatform = true;
    //     this.y = platform.y + platform.offset.top - this.height + this.offset.bottom;
    // }


      // checkCharacterCollision() {
    //     setInterval(() => {
    //         if (this.world && this.isColliding(this.world.character)) {
    //             console.log('character is colliding', this)
    //             this.attack();
    //             this.world.resetLifeBar();
    //             this.world.setCharacterLifeBar();
    //         }
    //     }, 100);
    // }




    // function to land on ground or platform before implementing method to climb down

     // tryToLandOn(object) {
    //     if (this.isAboveGroundOf(object)) {
    //         if (this.speedY > 0) {
    //             this.y = ((object.y + object.offset.top) - (this.height - this.offset.bottom));
    //             this.speedY = 0;
    //             this.hasAlreadyJumped = false;
    //         }
    //         if (object instanceof Platforms) this.isOnPlatform = true;
    //         else this.isOnPlatform = false;
    //         if (object instanceof Ground) this.isOnTheGround = true;
    //         if (this.isClimbing) {
    //             if (this.isOnPlatform || this.isOnTheGround) this.isClimbing = false;
    //         }
    //     }
    // }


    // hit() {
    //     if (this instanceof Snake) this.life -= 2;              // 2
    //     if (this instanceof Ent) this.life -= 5;                // 5
    //     if (this instanceof Bear) this.life -= 5;               // 5
    //     if (this instanceof Spider) this.life -= 10;                // 10
    //     if (this instanceof Endboss) this.life -= 0;                // 0
    //     if (this.life < 0) this.life = 0;           
    //     else this.lastHit = new Date().getTime();               
    // }


    // attack(){
    //     if (this instanceof Snake) this.world.character.life -= 1.5;
    //     if (this instanceof Ent) this.world.character.life -= 5;
    //     if (this instanceof Bear) this.world.character.life -= 6;
    //     if (this instanceof Spider) this.world.character.life -= 4;
    //     if (this instanceof Endboss) this.world.character.life -= 0;
    //     if (this.world.character.life < 0) this.world.character.life = 0;
    //     else this.world.character.lastHit = new Date().getTime();
    // }


    
    // applyGravity() {
    //     setInterval(() => {
    //         if(this.speedY < 0){
    //             this.y += this.speedY;
    //             this.speedY += this.gravityAcceleration;
    //         }else {
    //             this.speedY = 0;
    //         }
    //     }, 1000 / 60);
    // }


    // applyGravity() {
    //     setInterval(() => {
    //         if (this.isAboveGround() && !this.isClimbing && !this.isOnPlatform || this.speedY > 0) {
    //             console.log('applyGravity true')
    //             console.log('is on platform', this.isOnPlatform)
    //             this.y -= this.speedY;
    //             this.speedY -= this.gravityAcceleration;
    //         } else {
    //             console.log('applyGravity false')
    //             this.speedY = 0;
    //         }
    //     }, 1000 / 60);
    // }

    // isAboveGround() {
    //     if (this instanceof ThrowableObjects) {
    //         return true;
    //     } else if (!this.isOnPlatform && !this.isDead()) {
    //         return this.y <= this.ground;
    //     } else{
    //         return false;
    //     }
    // }

      
    // stopAttackAnimation(animation, x) {
    //     if (this.x >= x + 208) {
    //         clearInterval(animation);
    //     }
    // }


    
    // addSnakes() {
    //     for (let j = 0; j < 18; j++) {
    //         const snake = new Snake();
    //         this.level.enemies.push(snake);
    //     }
    // }

    // setGround() {
    //     let x = -64;
    //     const firstGroundItem = new Ground('img/level_set/forest/Tiles/Ground_grass_0000_tile.png', -128);
    //     this.level.ground.push(firstGroundItem);
    //     for (let index = 0; index < (this.level.level_end_x / 64); index++) {
    //         const ground = new Ground('img/level_set/forest/Tiles/Ground_grass_0001_tile.png', x);
    //         this.level.ground.push(ground);
    //         x = x + 64;
    //     }
    //     const lastGroundItem = new Ground('img/level_set/forest/Tiles/Ground_grass_0002_tile.png', this.level.level_end_x - 64);
    //     this.level.ground.push(lastGroundItem);
    // }

    // setFirstFloor() {
    //     let x = 1984;
    //     let numberOfImages = Math.round((this.level.level_end_x - x) / 64);
    //     for (let index = 0; index < numberOfImages; index++) {
    //         const floor = new Platforms('img/level_set/forest/Tiles/Ground_grass_0024_tile.png', x, 220);
    //         this.level.platforms.push(floor);
    //         x = x + 64;
    //     }
    // }

    // setBackground() {
    //     let x = -960;
    //     let numberOfImages = Math.round(this.level.level_end_x / this.canvas.width);
    //     for (let index = 0; index < numberOfImages + 1; index++) {
    //         const sky = new BackgroundObject('img/level_set/forest/Background/Bright/sky.png', x);
    //         const bigClouds = new BackgroundObject('img/level_set/forest/Background/Bright/clouds_back_layer2.png', x);
    //         const middelClouds = new BackgroundObject('img/level_set/forest/Background/Bright/clouds_back_layer1.png', x);
    //         const mountains = new BackgroundObject('img/level_set/forest/Background/Bright/mountains.png', x);
    //         const treeBackground = new BackgroundObject('img/level_set/forest/Background/Bright/trees.png', x);
    //         this.level.backgroundObjects.push(sky, bigClouds, middelClouds, mountains, treeBackground);
    //         x = x + this.canvas.width;
    //     }
    // }

    // setClouds() {
    //     let x = 0;
    //     for (let index = 0; index < 10; index++) {
    //         const cloud = new Clouds(x);
    //         this.level.clouds.push(cloud);
    //         x = x + this.canvas.width;
    //     }
    // }

    // setStairway() {
    //     let y = 228;
    //     let firstStairwayTile = new Stairway('img/level_set/forest/Objects/32/object_0012_stairway_corner.png', y);
    //     this.level.stairway.push(firstStairwayTile);
    //     for (let index = 0; index < 8; index++) {
    //         let stairwayFiller = new Stairway('img/level_set/forest/Objects/32/object_0010_stairway_filler.png', y);
    //         this.level.stairway.push(stairwayFiller);
    //         y = y + 32;
    //     }
    //     let lastStairwayTile = new Stairway('img/level_set/forest/Objects/32/object_0011_stairway_corner2.png', 484);
    //     this.level.stairway.push(lastStairwayTile);
    // }

     // climbDown() {
    //     this.world.level.stairway.forEach(step => {
    //         if (this.isColliding(step)) {
    //             this.isClimbing = true;
    //             this.speedY = 0;
    //             this.y += 5;
    //         }
    //         // if (!this.isColliding(step)) {
    //         //     this.isClimbing = false;
    //         //     this.speedY = 8;

    //         // }
    //     });
    // }


        // climbDown() {
    //     this.world.level.stairway.forEach(step => {
    //         if (!this.isClimbing) {
    //             if(this.isColliding(step) && this.isOnPlatform) this.isClimbing = true, this.y += 14, 
    //             this.isOnPlatform = false, this.speedY = 0;
    //             if(this.isColliding(step) && this.isOnTheGround) this.isClimbing = false;
    //         }
    //     });
    // }





// possible idea for improving game:

// initSoundConfiguration(){
//     setSoundArray();
//     setSoundsVolume();
// }

//  setSoundArray(){
//     allSoundArrays.push(this.world.level.walking_sound);
//     allSoundArrays.push(this.jump_sound);
//     allSoundArrays.push(this.world.level.collect_sound);
//     allSoundArrays.push(this.attack_sound);
//     allSoundArrays.push(this.hurt_sound);
//     allSoundArrays.push(this.tornado_effect);
// }

//  setSoundsVolume(){
//     allSoundArrays.forEach(sound =>{
//         sound.volume = 0.1
//     })
// }



    // applyGravity() {
    //     const applyGravity = setInterval(() => {
    //         this.isOnPlatform = false;
    //         this.isOnTheGround = false;
    //         this.y += this.speedY;
    //         if (this instanceof Character && this.isOnPlatform || this.isOnTheGround)
    //             this.speedY = 0
    //          else this.speedY += this.gravityAcceleration;
    //     }, 1000 / 60);
    //     allIntervals.push(applyGravity);
    // }



 // throwObjects() {
    //     if (!this.character.isDead() && this.keyboard.E) {
    //         let bottle = new throwableObjects(this.character.x + 35, this.character.y + 5);
    //         this.level.longRangeAttacks.push(bottle);
    //     }
    // }


// saveLevelResultPoint() {
    //     everyLevelsInformations.forEach(level => {
    //         if (level.name === this.level.levelName) {
    //             level.levelFinished = true;
    //             if (!level.levelReward) level.levelReward = this.starsScore;
    //             else if (this.starsScore > level.levelReward) level.levelReward = this.starsScore;
    //         }
    //     })
    // }






// check Ground and platform collision are intervals
// apply gravitiy is an interval

// apply gravity set speedY of 0.4 and ground / platform collision of 0
// because of it switch speedY from 0 to 0.4

// possible solution: have to set apply gravity only when character is aboveground.

    // applyGravity() {
    //     const applyGravity = setInterval(() => {
    //         this.y += this.speedY;
    //         if(this.isOnGround && this.instance of Character) {
    //             this.speedY = 0;
    //         } else {
    //             this.speedY += this.gravityAcceleration;
    //         }
    //     }, 1000 / 60);
    //     allIntervals.push(applyGravity);
    // }
